// g++ -std=gnu++11 Hello.cpp -o Hello.exe

#include <iostream>
#include <map>
#include <string>
#include <set>
using namespace std;

/*
Однажды, разбирая старые книги на чердаке, школьник Вася нашёл англо-латинский словарь. Английский он к тому времени знал в совершенстве, и его мечтой было изучить латынь. Поэтому попавшийся словарь был как раз кстати.
К сожалению, для полноценного изучения языка недостаточно только одного словаря: кроме англо-латинского необходим латинско-английский. За неимением лучшего он решил сделать второй словарь из первого.
Как известно, словарь состоит из переводимых слов, к каждому из которых приводится несколько слов-переводов. Для каждого латинского слова, встречающегося где-либо в словаре, Вася предлагает найти все его переводы (то есть все английские слова, для которых наше латинское встречалось в его списке переводов), и считать их и только их переводами этого латинского слова.
Помогите Васе выполнить работу по созданию латинско-английского словаря из англо-латинского.
Входные данные
В первой строке содержится единственное целое число N — количество английских слов в словаре. Далее следует N описаний. Каждое описание содержится в отдельной строке, в которой записано сначала английское слово, затем отделённый пробелами дефис (символ номер 45), затем разделённые запятыми с пробелами переводы этого английского слова на латинский. Переводы отсортированы в лексикографическом порядке. Порядок следования английских слов в словаре также лексикографический.
Все слова состоят только из маленьких латинских букв, длина каждого слова не превосходит 15 символов. Общее количество слов на входе не превышает 100000.
Выходные данные
В первой строке программа должна вывести количество слов в соответствующем данному латинско-английском словаре. Со второй строки выведите сам словарь, в точности соблюдая формат входных данных. В частности, первым должен идти перевод лексикографически минимального латинского слова, далее — второго в этом порядке и т.д. Внутри перевода английские слова должны быть также отсортированы лексикографически.
Sample Input:
3
apple - malum, pomum, popula
fruit - baca, bacca, popum
punishment - malum, multa
Sample Output:
7
baca - fruit
bacca - fruit
malum - apple, punishment
multa - punishment
pomum - apple
popula - apple
popum - fruit
*/
int main()
{
    int n; // number of words in a dictionary
    cin >> n;
    map <string, set<string> > m;

    string ln;
    getline(cin, ln); // read endl
    for (int i = 0; i < n; i++) {
        getline(cin, ln);
        // записано сначала английское слово, затем отделённый пробелами дефис (символ номер 45),
        // затем разделённые запятыми с пробелами переводы этого английского слова на латинский.
        // Переводы отсортированы в лексикографическом порядке. Порядок следования английских слов в словаре также лексикографический.
        // Все слова состоят только из маленьких латинских букв, длина каждого слова не превосходит 15 символов.
        // Общее количество слов на входе не превышает 100000.
        int ind = ln.find(" - ");
        string en_word = ln.substr(0, ind); // first word

        int start = ind + 3;
        int en;

        // take care of all the entries that have ", " after them
        while ( (en = ln.find(", ", start)) != string::npos ) {
            string lat_word = ln.substr(start, en - start);
            start = en + 2; // to accout for ", "
            m[lat_word].insert(en_word);  // insert a corresponding english word
        }

        // take care of the very last entry, that does not have ", " after it
        string lat_word = ln.substr(start, ln.size()-start);
        m[lat_word].insert(en_word);
    }

    // В первой строке программа должна вывести количество слов в соответствующем данному латинско-английском словаре.
    cout << m.size() << endl;

    for (auto now : m) {
        cout << now.first << " - ";
        int cnt = 0;
        for (string str : now.second) {
            cout << str;
            cnt ++;
            if (cnt < now.second.size()) {
                cout << ", ";
            }
        }
        cout << endl;
    }


    return 0;
}
